// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"admin/internal/biz"
	"admin/internal/conf"
	"admin/internal/data"
	"admin/internal/server"
	"admin/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, confService *conf.Service, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewRedis(confData)
	discovery := data.NewDiscovery(registry)
	commonClient := data.NewCommonServiceClient(confService, discovery)
	douyinClient := data.NewDouyinServiceClient(confService, discovery)
	companyClient := data.NewCompanyServiceClient(confService, discovery)
	dataData, cleanup, err := data.NewData(confData, db, client, commonClient, douyinClient, companyClient, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	menuRepo := data.NewMenuRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, menuRepo, confData, logger)
	roleRepo := data.NewRoleRepo(dataData, logger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, menuRepo, logger)
	tokenRepo := data.NewTokenRepo(dataData, logger)
	tokenUsecase := biz.NewTokenUsecase(tokenRepo, confData, logger)
	transaction := data.NewTransaction(dataData)
	menuUsecase := biz.NewMenuUsecase(menuRepo, roleRepo, transaction, logger)
	smsLogRepo := data.NewSmsLogRepo(dataData, logger)
	smsLogUsecase := biz.NewSmsLogUsecase(smsLogRepo, confData, logger)
	oceanengineConfigRepo := data.NewOceanengineConfigRepo(dataData, logger)
	oceanengineConfigUsecase := biz.NewOceanengineConfigUsecase(oceanengineConfigRepo, logger)
	companyMenuRepo := data.NewCompanyMenuRepo(dataData, logger)
	companyMenuUsecase := biz.NewCompanyMenuUsecase(companyMenuRepo, logger)
	clueRepo := data.NewClueRepo(dataData, logger)
	clueUsecase := biz.NewClueUsecase(clueRepo, userRepo, logger)
	industryRepo := data.NewIndustryRepo(dataData, logger)
	industryUsecase := biz.NewIndustryUsecase(industryRepo, logger)
	companyRepo := data.NewCompanyRepo(dataData, logger)
	companyUsecase := biz.NewCompanyUsecase(companyRepo, logger)
	companyUserRepo := data.NewCompanyUserRepo(dataData, logger)
	companyUserUsecase := biz.NewCompanyUserUsecase(companyUserRepo, logger)
	areaRepo := data.NewAreaRepo(dataData, logger)
	areaUsecase := biz.NewAreaUsecase(areaRepo, logger)
	updateLogRepo := data.NewupdateLogRepo(dataData, logger)
	updateLogUsecase := biz.NewUpdateLogUsecase(updateLogRepo, logger)
	adminService := service.NewAdminService(userUsecase, roleUsecase, tokenUsecase, menuUsecase, smsLogUsecase, oceanengineConfigUsecase, companyMenuUsecase, clueUsecase, industryUsecase, companyUsecase, companyUserUsecase, areaUsecase, updateLogUsecase, confData)
	httpServer := server.NewHTTPServer(confServer, adminService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}

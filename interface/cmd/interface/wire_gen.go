// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"interface/internal/biz"
	"interface/internal/conf"
	"interface/internal/data"
	"interface/internal/server"
	"interface/internal/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, confService *conf.Service, logger log.Logger) (*kratos.App, func(), error) {
	discovery := data.NewDiscovery(registry)
	commonClient := data.NewCommonServiceClient(confService, discovery)
	douyinClient := data.NewDouyinServiceClient(confService, discovery)
	companyClient := data.NewCompanyServiceClient(confService, discovery)
	materialClient := data.NewMaterialServiceClient(confService, discovery)
	weixinClient := data.NewWeixinServiceClient(confService, discovery)
	dataData, cleanup, err := data.NewData(commonClient, douyinClient, companyClient, materialClient, weixinClient, logger)
	if err != nil {
		return nil, nil, err
	}
	industryRepo := data.NewIndustryRepo(dataData, logger)
	industryUsecase := biz.NewIndustryUsecase(industryRepo, logger)
	areaRepo := data.NewAreaRepo(dataData, logger)
	areaUsecase := biz.NewAreaUsecase(areaRepo, logger)
	smsRepo := data.NewSmsRepo(dataData, logger)
	companyUserRepo := data.NewCompanyUserRepo(dataData, logger)
	smsUsecase := biz.NewSmsUsecase(smsRepo, companyUserRepo, logger)
	tokenRepo := data.NewTokenRepo(dataData, logger)
	tokenUsecase := biz.NewTokenUsecase(tokenRepo, logger)
	kuaidiCompanyRepo := data.NewKuaidiCompanyRepo(dataData, logger)
	kuaidiCompanyUsecase := biz.NewKuaidiCompanyUsecase(kuaidiCompanyRepo, confData, logger)
	loginRepo := data.NewLoginRepo(dataData, logger)
	loginUsecase := biz.NewLoginUsecase(loginRepo, logger)
	qianchuanAdvertiserRepo := data.NewQianchuanAdvertiserRepo(dataData, logger)
	oceanengineConfigRepo := data.NewOceanengineConfigRepo(dataData, logger)
	companyUserUsecase := biz.NewCompanyUserUsecase(companyUserRepo, qianchuanAdvertiserRepo, oceanengineConfigRepo, confData, logger)
	companyRepo := data.NewCompanyRepo(dataData, logger)
	companyUsecase := biz.NewCompanyUsecase(companyRepo, confData, logger)
	companySetRepo := data.NewCompanySetRepo(dataData, logger)
	companySetUsecase := biz.NewCompanySetUsecase(companySetRepo, confData, logger)
	clueRepo := data.NewClueRepo(dataData, logger)
	clueUsecase := biz.NewClueUsecase(clueRepo, logger)
	materialRepo := data.NewMaterialRepo(dataData, logger)
	materialUsecase := biz.NewMaterialUsecase(materialRepo, confData, logger)
	performanceRuleRepo := data.NewPerformanceRuleRepo(dataData, logger)
	performanceRuleUsecase := biz.NewPerformanceRuleUsecase(performanceRuleRepo, confData, logger)
	performanceRepo := data.NewPerformanceRepo(dataData, logger)
	performanceUsecase := biz.NewPerformanceUsecase(performanceRepo, confData, logger)
	performanceRebalanceRepo := data.NewPerformanceRebalanceRepo(dataData, logger)
	performanceRebalanceUsecase := biz.NewPerformanceRebalanceUsecase(performanceRebalanceRepo, confData, logger)
	updateLogRepo := data.NewUpdateLogRepo(dataData, logger)
	updateLogUsecase := biz.NewUpdateLogUsecase(updateLogRepo, confData, logger)
	userRepo := data.NewUserRepo(dataData, logger)
	userScanRecordRepo := data.NewUserScanRecordRepo(dataData, logger)
	userUsecase := biz.NewUserUsecase(userRepo, userScanRecordRepo, confData, logger)
	productRepo := data.NewProductRepo(dataData, logger)
	productUsecase := biz.NewProductUsecase(productRepo, userRepo, confData, logger)
	companyMaterialRepo := data.NewCompanyMaterialRepo(dataData, logger)
	companyMaterialUsecase := biz.NewCompanyMaterialUsecase(companyMaterialRepo, confData, logger)
	userAddressRepo := data.NewUserAddressRepo(dataData, logger)
	userAddressUsecase := biz.NewUserAddressUsecase(userAddressRepo, confData, logger)
	userStoreRepo := data.NewUserStoreRepo(dataData, logger)
	userStoreUsecase := biz.NewUserStoreUsecase(userStoreRepo, confData, logger)
	userOpenDouyinRepo := data.NewUserOpenDouyinRepo(dataData, logger)
	userOpenDouyinUsecase := biz.NewUserOpenDouyinUsecase(userOpenDouyinRepo, confData, logger)
	userScanRecordUsecase := biz.NewUserScanRecordUsecase(userScanRecordRepo, confData, logger)
	jinritemailOrderRepo := data.NewJinritemailOrderRepo(dataData, logger)
	jinritemailOrderUsecase := biz.NewJinritemailOrderUsecase(jinritemailOrderRepo, confData, logger)
	doukeOrderRepo := data.NewDoukeOrderRepo(dataData, logger)
	doukeOrderUsecase := biz.NewDoukeOrderUsecase(doukeOrderRepo, confData, logger)
	userSampleOrderRepo := data.NewUserSampleOrderRepo(dataData, logger)
	userSampleOrderUsecase := biz.NewUserSampleOrderUsecase(userSampleOrderRepo, confData, logger)
	userOrganizationRepo := data.NewUserOrganizationRepo(dataData, logger)
	userOrderRepo := data.NewUserOrderRepo(dataData, logger)
	userOrganizationUsecase := biz.NewUserOrganizationUsecase(userOrganizationRepo, userOrderRepo, confData, logger)
	userCouponRepo := data.NewUserCouponRepo(dataData, logger)
	userCouponUsecase := biz.NewUserCouponUsecase(userCouponRepo, confData, logger)
	userBalanceRepo := data.NewUserBalanceRepo(dataData, logger)
	userBalanceUsecase := biz.NewUserBalanceUsecase(userBalanceRepo, confData, logger)
	userBankRepo := data.NewUserBankRepo(dataData, logger)
	userBankUsecase := biz.NewUserBankUsecase(userBankRepo, confData, logger)
	userContractRepo := data.NewUserContractRepo(dataData, logger)
	userContractUsecase := biz.NewUserContractUsecase(userContractRepo, confData, logger)
	companyOrganizationRepo := data.NewCompanyOrganizationRepo(dataData, logger)
	companyOrganizationUsecase := biz.NewCompanyOrganizationUsecase(companyOrganizationRepo, confData, logger)
	companyTaskRepo := data.NewCompanyTaskRepo(dataData, logger)
	companyTaskUsecase := biz.NewCompanyTaskUsecase(companyTaskRepo, confData, logger)
	courseRepo := data.NewCourseRepo(dataData, logger)
	courseUsecase := biz.NewCourseUsecase(courseRepo, confData, logger)
	interfaceService := service.NewInterfaceService(industryUsecase, areaUsecase, smsUsecase, tokenUsecase, kuaidiCompanyUsecase, loginUsecase, companyUserUsecase, companyUsecase, companySetUsecase, clueUsecase, materialUsecase, performanceRuleUsecase, performanceUsecase, performanceRebalanceUsecase, updateLogUsecase, userUsecase, productUsecase, companyMaterialUsecase, userAddressUsecase, userStoreUsecase, userOpenDouyinUsecase, userScanRecordUsecase, jinritemailOrderUsecase, doukeOrderUsecase, userSampleOrderUsecase, userOrganizationUsecase, userCouponUsecase, userBalanceUsecase, userBankUsecase, userContractUsecase, companyOrganizationUsecase, companyTaskUsecase, courseUsecase)
	httpServer := server.NewHTTPServer(confServer, interfaceService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"company/internal/biz"
	"company/internal/conf"
	"company/internal/data"
	"company/internal/server"
	"company/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, volcengine *conf.Volcengine, company *conf.Company, confService *conf.Service, registry *conf.Registry, event *conf.Event, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewRedis(confData)
	conn := data.NewClickhouse(confData)
	sender := data.NewKafka(event)
	v := data.NewTos(volcengine)
	discovery := data.NewDiscovery(registry)
	douyinClient := data.NewDouyinServiceClient(confService, discovery)
	commonClient := data.NewCommonServiceClient(confService, discovery)
	weixinClient := data.NewWeixinServiceClient(confService, discovery)
	materialClient := data.NewMaterialServiceClient(confService, discovery)
	dataData, cleanup, err := data.NewData(confData, db, client, conn, sender, v, douyinClient, commonClient, weixinClient, materialClient, logger)
	if err != nil {
		return nil, nil, err
	}
	menuRepo := data.NewMenuRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	menuUsecase := biz.NewMenuUsecase(menuRepo, transaction, logger)
	industryRepo := data.NewIndustryRepo(dataData, logger)
	industryUsecase := biz.NewIndustryUsecase(industryRepo, logger)
	clueRepo := data.NewClueRepo(dataData, logger)
	companyRepo := data.NewCompanyRepo(dataData, logger)
	companyUserRepo := data.NewCompanyUserRepo(dataData, logger)
	companyUserRoleRepo := data.NewCompanyUserRoleRepo(dataData, logger)
	companyUserCompanyRepo := data.NewCompanyUserCompanyRepo(dataData, logger)
	companyPerformanceMonthlyRepo := data.NewCompanyPerformanceMonthlyRepo(dataData, logger)
	companyPerformanceDailyRepo := data.NewCompanyPerformanceDailyRepo(dataData, logger)
	companyPerformanceRebalanceRepo := data.NewCompanyPerformanceRebalanceRepo(dataData, logger)
	companyPerformanceRuleRepo := data.NewCompanyPerformanceRuleRepo(dataData, logger)
	areaRepo := data.NewAreaRepo(dataData, logger)
	clueUsecase := biz.NewClueUsecase(clueRepo, industryRepo, companyRepo, companyUserRepo, companyUserRoleRepo, companyUserCompanyRepo, companyPerformanceMonthlyRepo, companyPerformanceDailyRepo, companyPerformanceRebalanceRepo, companyPerformanceRuleRepo, areaRepo, transaction, confData, logger)
	qianchuanAdvertiserRepo := data.NewQianchuanAdvertiserRepo(dataData, logger)
	companySetRepo := data.NewCompanySetRepo(dataData, logger)
	companyUsecase := biz.NewCompanyUsecase(companyRepo, clueRepo, industryRepo, companyUserRepo, areaRepo, qianchuanAdvertiserRepo, companyPerformanceRuleRepo, companySetRepo, transaction, confData, event, logger)
	qianchuanAdvertiserHistoryRepo := data.NewQianchuanAdvertiserHistoryRepo(dataData, logger)
	qianchuanReportAdvertiserRepo := data.NewQianchuanReportAdvertiserRepo(dataData, logger)
	qianchuanReportAwemeRepo := data.NewQianchuanReportAwemeRepo(dataData, logger)
	qianchuanReportProductRepo := data.NewQianchuanReportProductRepo(dataData, logger)
	qianchuanAdRepo := data.NewQianchuanAdRepo(dataData, logger)
	companyUserWhiteRepo := data.NewCompanyUserWhiteRepo(dataData, logger)
	companyUserQianchuanSearchRepo := data.NewCompanyUserQianchuanSearchRepo(dataData, logger)
	smsRepo := data.NewSmsRepo(dataData, logger)
	companyUserUsecase := biz.NewCompanyUserUsecase(companyUserRepo, companyRepo, companyUserCompanyRepo, qianchuanAdvertiserRepo, qianchuanAdvertiserHistoryRepo, qianchuanReportAdvertiserRepo, qianchuanReportAwemeRepo, qianchuanReportProductRepo, qianchuanAdRepo, companyUserRoleRepo, companySetRepo, clueRepo, menuRepo, companyUserWhiteRepo, companyUserQianchuanSearchRepo, smsRepo, transaction, confData, logger)
	companyPerformanceRuleUsecase := biz.NewCompanyPerformanceRuleUsecase(companyPerformanceRuleRepo, companyRepo, qianchuanAdvertiserRepo, confData, logger)
	companyPerformanceRebalanceUsecase := biz.NewCompanyPerformanceRebalanceUsecase(companyPerformanceRebalanceRepo, companyPerformanceMonthlyRepo, companyUserRepo, transaction, confData, logger)
	qianchuanAdAdvertiserRepo := data.NewQianchuanAdAdvertiserRepo(dataData, logger)
	companyPerformanceUsecase := biz.NewCompanyPerformanceUsecase(companyPerformanceMonthlyRepo, companyPerformanceDailyRepo, companyPerformanceRebalanceRepo, companyRepo, companyUserRepo, companyUserRoleRepo, companyPerformanceRuleRepo, qianchuanAdvertiserRepo, qianchuanAdAdvertiserRepo, confData, logger)
	companySetUsecase := biz.NewCompanySetUsecase(companySetRepo, companyRepo, confData, logger)
	companyProductRepo := data.NewCompanyProductRepo(dataData, logger)
	companyProductCategoryRepo := data.NewCompanyProductCategoryRepo(dataData, logger)
	companyMaterialLibraryRepo := data.NewCompanyMaterialLibraryRepo(dataData, logger)
	companyTaskRepo := data.NewCompanyTaskRepo(dataData, logger)
	openDouyinUserInfoRepo := data.NewOpenDouyinUserInfoRepo(dataData, logger)
	jinritemaiStoreRepo := data.NewJinritemaiStoreRepo(dataData, logger)
	jinritemaiOrderRepo := data.NewJinritemaiOrderRepo(dataData, logger)
	weixinUserScanRecordRepo := data.NewWeixinUserScanRecordRepo(dataData, logger)
	materialMaterialRepo := data.NewMaterialMaterialRepo(dataData, logger)
	doukeProductRepo := data.NewDoukeProductRepo(dataData, logger)
	companyProductUsecase := biz.NewCompanyProductUsecase(companyProductRepo, companyProductCategoryRepo, companyMaterialLibraryRepo, companyRepo, companySetRepo, companyTaskRepo, openDouyinUserInfoRepo, jinritemaiStoreRepo, jinritemaiOrderRepo, weixinUserScanRecordRepo, materialMaterialRepo, doukeProductRepo, transaction, confData, company, volcengine, event, logger)
	companyMaterialRepo := data.NewCompanyMaterialRepo(dataData, logger)
	companyMaterialUsecase := biz.NewCompanyMaterialUsecase(companyMaterialRepo, companyRepo, companyMaterialLibraryRepo, transaction, confData, volcengine, event, logger)
	companyOrganizationRepo := data.NewCompanyOrganizationRepo(dataData, logger)
	qrCodeRepo := data.NewQrCodeRepo(dataData, logger)
	shortUrlRepo := data.NewShortUrlRepo(dataData, logger)
	shortCodeRepo := data.NewShortCodeRepo(dataData, logger)
	companyOrganizationUsecase := biz.NewCompanyOrganizationUsecase(companyOrganizationRepo, companyRepo, companyUserRepo, qrCodeRepo, shortUrlRepo, shortCodeRepo, transaction, confData, company, volcengine, logger)
	companyTaskAccountRelationRepo := data.NewCompanyTaskAccountRelationRepo(dataData, logger)
	companyTaskUsecase := biz.NewCompanyTaskUsecase(companyTaskRepo, companyTaskAccountRelationRepo, companyProductRepo, transaction, confData, logger)
	companyTaskDetailRepo := data.NewCompanyTaskDetailRepo(dataData, logger)
	doukeOrderRepo := data.NewDoukeOrderRepo(dataData, logger)
	weixinUserOpenDouyinRepo := data.NewWeixinUserOpenDouyinRepo(dataData, logger)
	weixinUserCommissionRepo := data.NewWeixinUserCommissionRepo(dataData, logger)
	companyTaskAccountRelationUsecase := biz.NewCompanyTaskAccountRelationUsecase(companyTaskAccountRelationRepo, companyTaskRepo, companyTaskDetailRepo, companyProductRepo, doukeOrderRepo, weixinUserOpenDouyinRepo, weixinUserCommissionRepo, transaction, confData, volcengine, logger)
	weixinUserRepo := data.NewWeixinUserRepo(dataData, logger)
	companyTaskDetailUsecase := biz.NewCompanyTaskDetailUsecase(companyTaskDetailRepo, companyTaskAccountRelationRepo, weixinUserRepo, weixinUserOpenDouyinRepo, confData, logger)
	companyService := service.NewCompanyService(menuUsecase, industryUsecase, clueUsecase, companyUsecase, companyUserUsecase, companyPerformanceRuleUsecase, companyPerformanceRebalanceUsecase, companyPerformanceUsecase, companySetUsecase, companyProductUsecase, companyMaterialUsecase, companyOrganizationUsecase, companyTaskUsecase, companyTaskAccountRelationUsecase, companyTaskDetailUsecase)
	grpcServer := server.NewGRPCServer(confServer, companyService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}

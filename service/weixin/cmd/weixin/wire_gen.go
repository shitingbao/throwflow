// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"weixin/internal/biz"
	"weixin/internal/conf"
	"weixin/internal/data"
	"weixin/internal/server"
	"weixin/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, confService *conf.Service, weixin *conf.Weixin, gongmall *conf.Gongmall, volcengine *conf.Volcengine, company *conf.Company, organization *conf.Organization, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewRedis(confData)
	mongoClient := data.NewMongo(confData)
	sonyflake := data.NewSonyflake()
	v := data.NewTos(volcengine)
	discovery := data.NewDiscovery(registry)
	companyClient := data.NewCompanyServiceClient(confService, discovery)
	douyinClient := data.NewDouyinServiceClient(confService, discovery)
	commonClient := data.NewCommonServiceClient(confService, discovery)
	dataData, cleanup, err := data.NewData(confData, db, client, mongoClient, sonyflake, v, companyClient, douyinClient, commonClient, logger)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	userOpenIdRepo := data.NewUserOpenIdRepo(dataData, logger)
	userOrganizationRelationRepo := data.NewUserOrganizationRelationRepo(dataData, logger)
	userIntegralRelationRepo := data.NewUserIntegralRelationRepo(dataData, logger)
	userScanRecordRepo := data.NewUserScanRecordRepo(dataData, logger)
	userOrderRepo := data.NewUserOrderRepo(dataData, logger)
	companyRepo := data.NewCompanyRepo(dataData, logger)
	companyProductRepo := data.NewCompanyProductRepo(dataData, logger)
	companyOrganizationRepo := data.NewCompanyOrganizationRepo(dataData, logger)
	userOpenDouyinRepo := data.NewUserOpenDouyinRepo(dataData, logger)
	jinritemaiOrderRepo := data.NewJinritemaiOrderRepo(dataData, logger)
	taskLogRepo := data.NewTaskLogRepo(dataData, logger)
	tuUserRepo := data.NewTuUserRepo(dataData, logger)
	couponUserRepo := data.NewCouponUserRepo(dataData, logger)
	shortUrlRepo := data.NewShortUrlRepo(dataData, logger)
	shortCodeRepo := data.NewShortCodeRepo(dataData, logger)
	userCouponCreateLogRepo := data.NewUserCouponCreateLogRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	userUsecase := biz.NewUserUsecase(userRepo, userOpenIdRepo, userOrganizationRelationRepo, userIntegralRelationRepo, userScanRecordRepo, userOrderRepo, companyRepo, companyProductRepo, companyOrganizationRepo, userOpenDouyinRepo, jinritemaiOrderRepo, taskLogRepo, tuUserRepo, couponUserRepo, shortUrlRepo, shortCodeRepo, userCouponCreateLogRepo, transaction, confData, weixin, volcengine, organization, logger)
	openDouyinUserInfoRepo := data.NewOpenDouyinUserInfoRepo(dataData, logger)
	awemesAdvertiserWeixinAuthRepo := data.NewAwemesAdvertiserWeixinAuthRepo(dataData, logger)
	djAwemeRepo := data.NewDjAwemeRepo(dataData, logger)
	userOpenDouyinUsecase := biz.NewUserOpenDouyinUsecase(userOpenDouyinRepo, openDouyinUserInfoRepo, awemesAdvertiserWeixinAuthRepo, djAwemeRepo, userRepo, transaction, confData, logger)
	qrCodeRepo := data.NewQrCodeRepo(dataData, logger)
	qrCodeUsecase := biz.NewQrCodeUsecase(qrCodeRepo, confData, weixin, organization, volcengine, gongmall, logger)
	userAddressRepo := data.NewUserAddressRepo(dataData, logger)
	areaRepo := data.NewAreaRepo(dataData, logger)
	userAddressUsecase := biz.NewUserAddressUsecase(userAddressRepo, areaRepo, transaction, confData, logger)
	userSampleOrderRepo := data.NewUserSampleOrderRepo(dataData, logger)
	kuaidiInfoRepo := data.NewKuaidiInfoRepo(dataData, logger)
	userSampleOrderUsecase := biz.NewUserSampleOrderUsecase(userSampleOrderRepo, userOpenDouyinRepo, userAddressRepo, companyRepo, companyProductRepo, jinritemaiOrderRepo, kuaidiInfoRepo, areaRepo, transaction, confData, logger)
	userScanRecordUsecase := biz.NewUserScanRecordUsecase(userScanRecordRepo, userRepo, companyOrganizationRepo, transaction, confData, logger)
	userCommissionRepo := data.NewUserCommissionRepo(dataData, logger)
	userBalanceLogRepo := data.NewUserBalanceLogRepo(dataData, logger)
	payRepo := data.NewPayRepo(dataData, logger)
	userOrderUsecase := biz.NewUserOrderUsecase(userOrderRepo, userRepo, userOrganizationRelationRepo, userIntegralRelationRepo, userScanRecordRepo, userCommissionRepo, userOpenIdRepo, userBalanceLogRepo, userCouponCreateLogRepo, companyRepo, companyOrganizationRepo, payRepo, qrCodeRepo, shortUrlRepo, shortCodeRepo, transaction, confData, organization, weixin, volcengine, logger)
	userCouponRepo := data.NewUserCouponRepo(dataData, logger)
	doukeOrderRepo := data.NewDoukeOrderRepo(dataData, logger)
	userOrganizationRelationUsecase := biz.NewUserOrganizationRelationUsecase(userOrganizationRelationRepo, userIntegralRelationRepo, userRepo, userOpenDouyinRepo, userScanRecordRepo, userOrderRepo, userCommissionRepo, userCouponRepo, companyRepo, companyOrganizationRepo, jinritemaiOrderRepo, doukeOrderRepo, djAwemeRepo, taskLogRepo, transaction, confData, organization, weixin, logger)
	companyTaskRepo := data.NewCompanyTaskRepo(dataData, logger)
	userCommissionUsecase := biz.NewUserCommissionUsecase(userCommissionRepo, userRepo, userOrganizationRelationRepo, userIntegralRelationRepo, userOpenDouyinRepo, userOrderRepo, userCouponRepo, userScanRecordRepo, userBalanceLogRepo, companyOrganizationRepo, companyTaskRepo, jinritemaiOrderRepo, doukeOrderRepo, djAwemeRepo, taskLogRepo, transaction, confData, company, organization, logger)
	userCouponUsecase := biz.NewUserCouponUsecase(userCouponRepo, userCouponCreateLogRepo, userOrganizationRelationRepo, userIntegralRelationRepo, userCommissionRepo, userRepo, userScanRecordRepo, companyOrganizationRepo, shortCodeRepo, transaction, confData, organization, weixin, volcengine, logger)
	userBankRepo := data.NewUserBankRepo(dataData, logger)
	userContractRepo := data.NewUserContractRepo(dataData, logger)
	userBalanceUsecase := biz.NewUserBalanceUsecase(userRepo, userBankRepo, userBalanceLogRepo, userContractRepo, userCommissionRepo, taskLogRepo, transaction, confData, organization, gongmall, logger)
	userContractUsecase := biz.NewUserContractUsecase(userContractRepo, userRepo, userBankRepo, userOrganizationRelationRepo, companyRepo, companyOrganizationRepo, transaction, confData, organization, gongmall, logger)
	userBankUsecase := biz.NewUserBankUsecase(userBankRepo, userRepo, userContractRepo, transaction, confData, organization, gongmall, logger)
	courseRepo := data.NewCourseRepo(dataData, logger)
	courseUserRepo := data.NewCourseUserRepo(dataData, logger)
	courseUsecase := biz.NewCourseUsecase(courseRepo, courseUserRepo, userOrganizationRelationRepo, confData, logger)
	weixinService := service.NewWeixinService(userUsecase, userOpenDouyinUsecase, qrCodeUsecase, userAddressUsecase, userSampleOrderUsecase, userScanRecordUsecase, userOrderUsecase, userOrganizationRelationUsecase, userCommissionUsecase, userCouponUsecase, userBalanceUsecase, userContractUsecase, userBankUsecase, courseUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, weixinService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"common/internal/biz"
	"common/internal/conf"
	"common/internal/data"
	"common/internal/server"
	"common/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, confData *conf.Data, registry *conf.Registry, sms *conf.Sms, suolink *conf.Suolink, organization *conf.Organization, pay *conf.Pay, kuaidi *conf.Kuaidi, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewRedis(confData)
	dataData, cleanup, err := data.NewData(confData, db, client, logger)
	if err != nil {
		return nil, nil, err
	}
	smsRepo := data.NewSmsLogRepo(dataData, logger)
	smsUsecase := biz.NewSmsUsecase(smsRepo, confData, sms, logger)
	payAsyncNotificationLogRepo := data.NewPayAsyncNotificationLogRepo(dataData, logger)
	payUsecase := biz.NewPayUsecase(payAsyncNotificationLogRepo, confData, pay, organization, logger)
	tokenRepo := data.NewTokenRepo(dataData, logger)
	tokenUsecase := biz.NewTokenUsecase(tokenRepo, confData, logger)
	areaRepo := data.NewAreaRepo(dataData, logger)
	areaUsecase := biz.NewAreaUsecase(areaRepo, logger)
	updateLogRepo := data.NewUpdateLogRepo(dataData, logger)
	updateLogUsecase := biz.NewUpdateLogUsecase(updateLogRepo, logger)
	shortUrlUsecase := biz.NewShortUrlUsecase(confData, suolink, logger)
	shortCodeLogRepo := data.NewShortCodeLogRepo(dataData, logger)
	shortCodeUsecase := biz.NewShortCodeUsecase(shortCodeLogRepo, confData, logger)
	kuaidiCompanyRepo := data.NewKuaidiCompanyRepo(dataData, logger)
	kuaidiCompanyUsecase := biz.NewKuaidiCompanyUsecase(kuaidiCompanyRepo, logger)
	kuaidiInfoRepo := data.NewKuaidiInfoRepo(dataData, logger)
	kuaidiInfoUsecase := biz.NewKuaidiInfoUsecase(kuaidiInfoRepo, kuaidiCompanyRepo, kuaidi, logger)
	commonService := service.NewCommonService(smsUsecase, payUsecase, tokenUsecase, areaUsecase, updateLogUsecase, shortUrlUsecase, shortCodeUsecase, kuaidiCompanyUsecase, kuaidiInfoUsecase, confData)
	grpcServer := server.NewGRPCServer(confServer, commonService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
